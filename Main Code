#first change after syncing to local mac repo and commiting within visual code studio - just this comment
#second change made after loading into V
#import needed libraries
import random
import turtle
from turtle import *

#Define constants
RIGHT_EDGE= 400
LEFT_EDGE = -400
BOTTOM_EDGE = -400
TOP_EDGE = 400

GRAVITY = .1
DAMPING = .8
FRICTION = .02
spacevar=2

def spacebar():
    global spacevar
    if spacevar//2==0:
        RIGHT_EDGE=200
        LEFT_EDGE=-200
        BOTTOM_EDGE=-200
        TOP_EDGE=200
    if spacevar//2!=0:
        RIGHT_EDGE= 400
        LEFT_EDGE = -400
        BOTTOM_EDGE = -400
        TOP_EDGE = 400
    spacevar=spacevar+1
    
turtle.onkey(spacebar,"space")

def randomcolor(): #making this a function to be repeatable
    colornumber=random.randint(0,2)
    return(colornumber)

topbottomcolorlist=["blue","red","yellow"] #making lists to randomly select from
leftrightcolorlist=["white","chocolate","skyblue"]

#This function will update the location of the ball
def moveBall():
    global xVel, yVel

    #update the postiion of the ball
    x = ball.xcor()
    if xVel != 0: # we have not stopped rolling due to friction
        ball.setx(x + xVel)
        
    y = ball.ycor()
    if yVel!=0: #if it's 0 we are not bouncing, we are rolling
        yVel = yVel + GRAVITY   #only y is impacted by gravity
        #reversed to make gravity pull upwards
        ball.sety(y + yVel)
    else:   # friction comes into play while rolling which impacts xVel
        if (xVel>0):  xVel = xVel-FRICTION
        if (xVel<0):  xVel = xVel+FRICTION
        if abs(xVel)>.005:  #we are still rolling
            # print(xVel) - debug
            pass
        else:  # we are done - ball stopped bouncing and then stopped rolling
            exit()

    #Check for collisons and reverse the direction if so
    if (x >= RIGHT_EDGE):
        colornumber=randomcolor() #generates a random number as a function to get a new color each time
        ball.color(leftrightcolorlist[colornumber]) #changes the ball to that color
        xVel *= -1
        if xVel!=0:
            ball.setx(x + xVel-5)

    if (x <= LEFT_EDGE):
        colornumber=randomcolor()
        ball.color(leftrightcolorlist[colornumber])
        xVel *= -1
        if xVel!=0:
            ball.setx(x + xVel+5)
   
    if (y <= BOTTOM_EDGE+5):
        colornumber=randomcolor()
        ball.color(topbottomcolorlist[colornumber])
        yVel *= -1
        yVel = yVel * DAMPING #damping effect
        if yVel>2:
            ball.sety(y + yVel+5)
        else:
            yVel=0

    if (y >= TOP_EDGE):
        colornumber=randomcolor()
        ball.color(topbottomcolorlist[colornumber])
        yVel *= -1
        ball.sety(y + yVel-5)

    

#Global variables
screen = Screen()
screen.title("My window")
screen.bgcolor("green")

ball = Turtle()
ball.clear()
ball.penup()

ball.shape("circle")
ball.color("blue")
ball.position()
ball.speed(0)
ball.setheading(40)

#Define initial position and speed of the ball
ball.setx(0)
ball.sety(0)
xVel = 5
yVel = 3

screen.tracer(0) #turn off auto screen updates to make it faster


while True:
    turtle.listen()
    moveBall()
    screen.update()
